1.  Install ecs-cli. Execute the following commands-
    1.  Download ecs-cli - sudo curl -o /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-darwin-amd64-latest
    2.  Check download and version - curl -s https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-darwin-amd64-latest.md5 && md5 -q /usr/local/bin/ecs-cli
        Compare the output strings and ensure they are the same
    3.  Give permissions for execution of downloaded binaries - sudo chmod +x /usr/local/bin/ecs-cli
2. Configure ecs-cli
    1.  Configure profile ecs-cli configure profile --profile-name your_profile_name --access-key your_access_key_id --secret-key your_secret_key
    2.  Configure cluster to be created - ecs-cli configure --cluster your_cluster_name --default-launch-type EC2 --config-name your_config_name --region your_preferred_region
3.  Create EC2 id_rsa key pair in the aws console for EC2 - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#prepare-key-pair 
    Or use aws cli to create a key pair using the create-key-pair command as follows - aws ec2 create-key-pair --key-name your_key_pair_name
    The following is the output when this command is run, store it in a safe location- 
-----------------------id-rsa----------------------
    {
    "KeyFingerprint": "your_key_pair_finger_print",
    "KeyMaterial": "your_key_pair_private_key",
    "KeyName": "your_key_pair_name",
    "KeyPairId": "your_key_pair_id"
    }
-----------------------id-rsa----------------------
4.  Create cluster with ecs-cli up command as follows-
    ecs-cli up --keypair your_key_pair_name --capability-iam --size 2 --instance-type t2.medium --cluster-config your_config_name --ecs-profile empulse --region your_preferred_region
5.  Upload the local docker images unto AWS Elastic Container Registry. Refer to this tutorial for more details. https://linuxacademy.com/blog/linux-academy/deploying-a-containerized-flask-application-with-aws-ecs-and-docker/ and https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html
    The following are the list of commands to follow-
    1.  Get the nanmes of containers to push-  
        docker image ls
        The example application has two images 
        empulse_web and postgres
    2.  Create repositories for both the images
        aws ecr create-repository --repository-name postgres
        aws ecr create-repository --repository-name empulse_web
    3.  Provide docker cli with aws login credentials using the following commands- 
        aws ecr get-login-password --region your_preferred_region | docker login --username AWS --password-stdin your_account_id.dkr.ecr.your_preferred_region.amazonaws.com 
    4.  Tag the docker images names in the format as shown in the commands below-   
        docker tag postgres:12-alpine your_account_id.dkr.ecr.your_preferred_region.amazonaws.com/postgres 
        docker tag empulse_web:latest your_account_id.dkr.ecr.your_preferred_region.amazonaws.com/empulse_web
    5.  Push the images to AWS Elastic Container Registry
        docker push your_account_id.dkr.ecr.your_preferred_region.amazonaws.com/postgres
        docker push your_account_id.dkr.ecr.your_preferred_region.amazonaws.com/empulse_web
6.  After you create the docker-compose.yml and ecs-params.yml files, you can deploy the application to your cluster with the ecs-cli compose up command. By default, the command looks for a compose file called docker-compose.yml and an optional ECS parameters file called ecs-params.yml in the current directory, but you can specify a different file with the --file option- 
    ecs-cli compose up --create-log-groups --cluster-config your_config_name --ecs-profile empulse --region your_preferred_region
7.  Run the following command to check if the containers have been successfully created or not - 
    ecs-cli ps --cluster-config your_config_name --ecs-profile your_profile_name  
